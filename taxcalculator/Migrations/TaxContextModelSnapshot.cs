// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using taxcalculator.Database;

namespace taxcalculator.Migrations
{
    [DbContext(typeof(TaxContext))]
    partial class TaxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("taxcalculator.Models.Calc", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("InValue")
                        .HasColumnType("float");

                    b.Property<double>("OutValue")
                        .HasColumnType("float");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("calculatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TypeId");

                    b.ToTable("Calcs");
                });

            modelBuilder.Entity("taxcalculator.Models.ProgressiveTable", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("ValueFrom")
                        .HasColumnType("float");

                    b.Property<double>("ValueTo")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Progressives");

                    b.HasData(
                        new
                        {
                            ID = new Guid("6a5d39be-bd14-4e9c-bd9b-d9873d982eb2"),
                            Rate = 10.0,
                            ValueFrom = 0.0,
                            ValueTo = 8350.0
                        },
                        new
                        {
                            ID = new Guid("2044cb23-1c10-4b41-a324-ae43efbf7965"),
                            Rate = 15.0,
                            ValueFrom = 8351.0,
                            ValueTo = 33950.0
                        },
                        new
                        {
                            ID = new Guid("ac2b6f59-aff4-4ab9-9d54-bb270646a268"),
                            Rate = 25.0,
                            ValueFrom = 33951.0,
                            ValueTo = 82250.0
                        },
                        new
                        {
                            ID = new Guid("8fff718a-6893-4d79-98d3-f898b54464f5"),
                            Rate = 28.0,
                            ValueFrom = 82251.0,
                            ValueTo = 171550.0
                        },
                        new
                        {
                            ID = new Guid("accec7ac-6dbc-4e66-884d-2a2a1bf1a618"),
                            Rate = 33.0,
                            ValueFrom = 171551.0,
                            ValueTo = 372950.0
                        },
                        new
                        {
                            ID = new Guid("6f8cec65-8720-4673-82bb-6ed79e866283"),
                            Rate = 35.0,
                            ValueFrom = 372951.0,
                            ValueTo = 1.7976931348623157E+308
                        });
                });

            modelBuilder.Entity("taxcalculator.Models.TaxType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalcType")
                        .HasColumnType("int");

                    b.Property<double>("DefaultRate")
                        .HasColumnType("float");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("float");

                    b.Property<double>("MaxEarns")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TaxTypes");

                    b.HasData(
                        new
                        {
                            ID = new Guid("e2a1a8c9-98dc-48cc-aaaf-8bd9c1c196f3"),
                            CalcType = 0,
                            DefaultRate = 0.0,
                            DefaultValue = 0.0,
                            MaxEarns = 0.0,
                            PostalCode = "7441"
                        },
                        new
                        {
                            ID = new Guid("2f62f38a-cd04-48bc-b447-2870a216d6db"),
                            CalcType = 1,
                            DefaultRate = 5.0,
                            DefaultValue = 10000.0,
                            MaxEarns = 200000.0,
                            PostalCode = "A100"
                        },
                        new
                        {
                            ID = new Guid("3ed63200-0c9b-432a-b55c-01af3f079c83"),
                            CalcType = 2,
                            DefaultRate = 17.5,
                            DefaultValue = 0.0,
                            MaxEarns = 0.0,
                            PostalCode = "7000"
                        },
                        new
                        {
                            ID = new Guid("ce5271af-1cf9-42fc-89c3-82c8adc76bfa"),
                            CalcType = 0,
                            DefaultRate = 0.0,
                            DefaultValue = 0.0,
                            MaxEarns = 0.0,
                            PostalCode = "1000"
                        });
                });

            modelBuilder.Entity("taxcalculator.Models.Calc", b =>
                {
                    b.HasOne("taxcalculator.Models.TaxType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
